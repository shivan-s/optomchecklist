{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["generateObjects","itemList","map","procedure","i","id","title","checked","preExamProceduresObjects","examProceduresObjects","postExamProceduresObjects","Header","name","Main","subheading","objectProcedures","useState","items","setItems","count","reduce","previous","value","className","length","style","textAlign","item","type","onChange","event","itemThatWasClicked","newItems","currentTarget","Footer","Date","getFullYear","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAoDA,SAASA,EAAgBC,GACxB,OAAOA,EAASC,KAAI,SAACC,EAAWC,GAAZ,MAAmB,CACtCC,GAAIF,EAAYC,EAChBE,MAAOH,EACPI,SAAS,MAIX,IAAMC,EAA2BR,EAzDP,CACzB,mBACA,+BACA,mDACA,wEACA,iDACA,uEACA,wBACA,qDAkDKS,EAAwBT,EAhDP,CACtB,uBACA,0CACA,wBACA,sEACA,2BACA,kDACA,aACA,mBACA,0CACA,6BACA,mCACA,iCACA,uCACA,wBACA,aACA,aACA,sBACA,uBACA,SACA,MACA,KACA,sBACA,4BACA,qBACA,4CACA,kBACA,aACA,UACA,WAoBKU,EAA4BV,EAjBP,CAC1B,iBACA,eACA,mCACA,gCAeD,SAASW,EAAT,GAA2B,IAATC,EAAQ,EAARA,KACjB,OACC,iCACC,+BAAKA,EAAL,oBAKH,SAASC,EAAT,GAAiD,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,iBAC3B,EAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACMC,EAAQF,EAAMG,QACnB,SAACC,EAAUC,GAAX,OAAqBD,GAAYC,EAAMf,QAAU,EAAI,KACrD,GAYD,OACC,oCACC,qBACCgB,UACCJ,IAAUJ,EAAiBS,OAAS,YAAc,aAFpD,UAKEV,EALF,KAKgBK,EALhB,IAKwBJ,EAAiBS,OALzC,OAOA,oBAAIC,MAAO,CAAEC,UAAW,QAAxB,SACET,EAAMf,KAAI,SAACyB,GAAD,OACV,mBAAGJ,UAAWI,EAAKpB,QAAU,UAAY,GAAIF,GAAIsB,EAAKtB,GAAtD,SACC,kCACC,uBACCuB,KAAK,WACLC,SAAU,SAACC,GAAD,OAzBA,SAACC,EAAoBxB,GACrC,IAAMyB,EAAWf,EAAMf,KAAI,SAACyB,GAC3B,OAAIA,EAAKrB,QAAUyB,EACX,CAAEzB,MAAOqB,EAAKrB,MAAOC,QAASA,GAE9BoB,KAGTT,EAASc,GAkBFH,CAASF,EAAKrB,MAAOwB,EAAMG,cAAc1B,YAG1CoB,EAAKrB,mBASb,SAAS4B,IACR,OACC,mCACC,+DAAiC,IAAIC,MAAOC,iBAC5C,4BACC,mBAAGC,KAAK,8CAAR,8BA0BWC,MApBf,WACC,OACC,sBAAKf,UAAU,MAAf,UACC,cAACZ,EAAD,CAAQC,KAAK,gBACb,cAACC,EAAD,CACCC,WAAW,qBACXC,iBAAkBP,IAEnB,cAACK,EAAD,CACCC,WAAW,iBACXC,iBAAkBN,IAEnB,cAACI,EAAD,CACCC,WAAW,sBACXC,iBAAkBL,IAEnB,cAACwB,EAAD,QCnIYK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2e25af10.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst preExamProcedures = [\n\t\"Select exam type\",\n\t\"Select date and time of exam\",\n\t\"Record date of last examination / First Eye Exam\",\n\t\"Enter previous dispensed Rx - date and lens design / Never worn specs\",\n\t\"Record General Health / Medication / Allergies\",\n\t\"Record previous Ocular History (include date, condition, specialist)\",\n\t\"Record Family History\",\n\t\"Record previous Contact Lens Rx in aftercare tab\",\n];\nconst examProcedures = [\n\t\"Record chief concern\",\n\t\"Update general / ocular / family health\",\n\t\"Confirm patient needs\",\n\t\"Confirm what correction(s) patient is wearing and how they are used\",\n\t\"Unaided Mono and Bino VA\",\n\t\"Aided distance and near VAs for specs (and CLs)\",\n\t\"Refraction\",\n\t\"Binocular Vision\",\n\t\"Best corrected VA for distance and near\",\n\t\"CL Examination - Aided VAs\",\n\t\"CL Examination - Over Refraction\",\n\t\"CL Examination - Fitting notes\",\n\t\"CL Examiantion - trail Rx / final Rx\",\n\t\"IOP - device and time\",\n\t\"K readings\",\n\t\"Pachymetry\",\n\t\"Anterior eye health\",\n\t\"Posterior eye health\",\n\t\"Photos\",\n\t\"OCT\",\n\t\"VF\",\n\t\"Summary of findings\",\n\t\"Give px written reasource\",\n\t\"Make recommendaion\",\n\t\"Arrangements of further investigate tests\",\n\t\"Frame selection\",\n\t\"Dispensing\",\n\t\"Billing\",\n\t\"Recall\",\n];\n\nconst postExamProcedures = [\n\t\"Complete Order\",\n\t\"Pop-up Notes\",\n\t\"Referral letter written and sent\",\n\t\"Order Trials contact lenses\",\n];\n\nfunction generateObjects(itemList) {\n\treturn itemList.map((procedure, i) => ({\n\t\tid: procedure + i,\n\t\ttitle: procedure,\n\t\tchecked: false,\n\t}));\n}\n\nconst preExamProceduresObjects = generateObjects(preExamProcedures);\nconst examProceduresObjects = generateObjects(examProcedures);\nconst postExamProceduresObjects = generateObjects(postExamProcedures);\n\nfunction Header({ name }) {\n\treturn (\n\t\t<header>\n\t\t\t<h1>{name}'s Task List</h1>\n\t\t</header>\n\t);\n}\n\nfunction Main({ subheading, objectProcedures }) {\n\tconst [items, setItems] = useState(objectProcedures);\n\tconst count = items.reduce(\n\t\t(previous, value) => previous + (value.checked ? 1 : 0),\n\t\t0\n\t);\n\tconst onChange = (itemThatWasClicked, checked) => {\n\t\tconst newItems = items.map((item) => {\n\t\t\tif (item.title === itemThatWasClicked) {\n\t\t\t\treturn { title: item.title, checked: checked };\n\t\t\t} else {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t});\n\t\tsetItems(newItems);\n\t};\n\treturn (\n\t\t<section>\n\t\t\t<h2\n\t\t\t\tclassName={\n\t\t\t\t\tcount === objectProcedures.length ? \"completed\" : \"incomplete\"\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{subheading} ({count}/{objectProcedures.length})\n\t\t\t</h2>\n\t\t\t<ul style={{ textAlign: \"Left\" }}>\n\t\t\t\t{items.map((item) => (\n\t\t\t\t\t<p className={item.checked ? \"checked\" : \"\"} id={item.id}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\t\t\tonChange(item.title, event.currentTarget.checked)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{item.title}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</p>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</section>\n\t);\n}\n\nfunction Footer() {\n\treturn (\n\t\t<footer>\n\t\t\t<p>Made by Shivan Sivakumaran - {new Date().getFullYear()}</p>\n\t\t\t<p>\n\t\t\t\t<a href=\"https://github.com/shivans93/optomchecklist\">Source Code</a>\n\t\t\t</p>\n\t\t</footer>\n\t);\n}\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header name=\"Optometrist\" />\n\t\t\t<Main\n\t\t\t\tsubheading=\"Pre-Exam Procedure\"\n\t\t\t\tobjectProcedures={preExamProceduresObjects}\n\t\t\t/>\n\t\t\t<Main\n\t\t\t\tsubheading=\"Exam Procedure\"\n\t\t\t\tobjectProcedures={examProceduresObjects}\n\t\t\t/>\n\t\t\t<Main\n\t\t\t\tsubheading=\"Post-Exam Procedure\"\n\t\t\t\tobjectProcedures={postExamProceduresObjects}\n\t\t\t/>\n\t\t\t<Footer />\n\t\t</div>\n\t);\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}